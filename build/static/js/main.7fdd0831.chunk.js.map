{"version":3,"sources":["components/ExpenseListItem.js","components/ExpenseList.js","selectors/expenses.js","actions/filters.js","components/ExpenseListFilters.js","components/ExpenseDashboardPage.js","components/ExpenseForm.js","components/AddExpensePage.js","actions/expenses.js","components/EditExpensePage.js","components/HelpPage.js","components/NotFoundPage.js","components/Header.js","routers/AppRouter.js","serviceWorker.js","reducers/expenses.js","reducers/filters.js","index.js","store/configureStore.js"],"names":["ExpenseListItem","_ref","id","description","amount","createdAt","react_default","a","createElement","Link","to","concat","connect","state","expenses","text","sortBy","startDate","endDate","filter","expense","createdAtMoment","moment","startDateMatch","isSameOrBefore","endDateMatch","isSameOrAfter","textMatch","toLowerCase","includes","sort","b","selectExpenses","filters","props","map","components_ExpenseListItem","Object","assign","key","setStartDate","type","setEndDate","ExpenseListFilters","calendarFocused","onDatesChange","_this","dispatch","onFocusChange","setState","_this2","this","value","onChange","e","arguments","length","undefined","setTextFilter","target","react_dates","focusedInput","showClearDates","numberOfMonth","isOutsideRange","React","Component","ExpenseDashboardPage","components_ExpenseListFilters","components_ExpenseList","ExpenseForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onDescriptionChange","onNoteChange","note","onAmountChange","match","onDateChange","focused","onSubmit","preventDefault","error","parseFloat","valueOf","toString","placeholder","autoFocus","date","numberOfMonths","ExpenseForm_ExpenseForm","_ref$description","_ref$note","_ref$amount","_ref$createdAt","uuid","addExpense","history","push","find","params","updates","console","log","onClick","removeExpense","HelpPage","NotFoundPage","Header","NavLink","activeClassName","exact","AppRouter","BrowserRouter","components_Header","Switch","Route","path","component","AddExpensePage","EditExpensePage","Boolean","window","location","hostname","expensesReducerDefaultState","expensesReducer","action","toConsumableArray","objectSpread","filtersReducerDefaultState","startOf","endOf","filtersReducer","store","createStore","combineReducers","__REDUX_DEVTOOLS_EXTENSION__","jsx","es","routers_AppRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fdd0831.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\n\n//props are injected from ExpenseList.js\nconst ExpenseListItem = ({ id, description, amount, createdAt}) => (\n  <div>\n    <Link to={`/edit/${id}`}>\n      <h3>{description}</h3>\n    </Link>\n    <p>{amount}-{createdAt}</p>\n\n  </div>\n);\n\nexport default ExpenseListItem;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport ExpenseListItem from './ExpenseListItem';\nimport selectExpenses from '../selectors/expenses';\n\nconst ExpenseList = (props) => (\n  <div>\n    <h1>Expense List</h1>\n    {props.expenses.map((expense) => {\n      return <ExpenseListItem key={expense.id} {...expense} />\n    })}\n  </div>\n);\n\n/*combine redux created store(state) to\nreact props by using 'connect'*/\nconst mapStateToProps = (state) => {\n  return{\n    expenses: selectExpenses(state.expenses, state.filters)\n  };\n};\nexport default connect(mapStateToProps)(ExpenseList);\n","import moment from 'moment';\n\n//Get visible expenses\nexport default (expenses,{text, sortBy, startDate, endDate})=>{\n  return expenses.filter((expense)=>{\n    const createdAtMoment = moment(expense.createdAt);\n    const startDateMatch = startDate ? startDate.isSameOrBefore(createdAtMoment,'day'): true ;\n    const endDateMatch = endDate ? endDate.isSameOrAfter(createdAtMoment,'day'): true ;\n    const textMatch = expense.description.toLowerCase().includes(text.toLowerCase());\n\n    return startDateMatch && endDateMatch && textMatch;\n  }).sort((a,b) => {\n    if (sortBy === 'date'){\n      return a.createdAt < b.createdAt ? 1 : -1;\n    }else if(sortBy === 'amount'){\n      return a.amount < b.amount ? 1: -1;\n    }\n  });\n};\n","//actions for dispatching by redux\n//dispatched action goes to reducers\n\n//SET_TEXT_FILTER\nexport const setTextFilter = (text = '') => ({\n  type: 'SET_TEXT_FILTER',\n  text\n});\n//SORT_BY_DATE\nexport const sortByDate=() =>({\n  type: 'SORT_BY_DATE'\n});\n//SORT_BY_AMOUNT\nexport const sortByAmount=() =>({\n  type: 'SORT_BY_AMOUNT'\n});\n//SET_START_DATE\nexport const setStartDate =(startDate) => ({\n  type: 'SET_START_DATE',\n  startDate\n})\n//SET_END_DATE\nexport const setEndDate =(endDate) => ({\n  type: 'SET_END_DATE',\n  endDate\n})\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {DateRangePicker} from 'react-dates';\nimport {setTextFilter,sortByDate,sortByAmount,setStartDate,setEndDate} from '../actions/filters';//actions for redux dispatching\n\nclass ExpenseListFilters extends React.Component{\n  state={\n    calendarFocused: null\n  };\n  onDatesChange = ({startDate, endDate}) =>{\n    this.props.dispatch(setStartDate(startDate));\n    this.props.dispatch(setEndDate(endDate));\n  };\n  onFocusChange = (calendarFocused) =>{\n    this.setState(() => ({calendarFocused}));\n  }\n  render() {\n    return (\n      <div>\n        {/* text filtering */}\n        <input\n          type=\"text\"\n          value={this.props.filters.text}\n          onChange={(e) => {\n            this.props.dispatch(setTextFilter(e.target.value));\n          }}\n        />\n\n        {/* pulldown for sorting(sortBy is defined in reducer\n          filters.js : date of amount) */}\n        <select\n          value={this.props.filters.sortBy}\n          onChange={(e) => {\n            if(e.target.value === 'date'){\n              this.props.dispatch(sortByDate());\n            }else if (e.target.value==='amount'){\n              this.props.dispatch(sortByAmount());\n            }\n          }}\n        >\n          <option value=\"date\">Date</option>\n          <option value=\"amount\">Amount</option>\n        </select>\n        {/*The Calendar will show according the conditions below.*/}\n        <DateRangePicker\n          startDate = {this.props.filters.startDate}\n          endDate = {this.props.filters.endDate}\n          onDatesChange={this.onDatesChange}\n          focusedInput={this.state.calendarFocused}\n          onFocusChange={this.onFocusChange}\n          showClearDates={true}\n          numberOfMonth={1}\n          isOutsideRange={() => false}\n        />\n      </div>\n    )\n  }\n}\n\n/*combine redux created store(state) to\nreact props by using 'connect'*/\nconst mapStateToProps = (state) => {\n  return{\n    filters: state.filters\n  };\n};\nexport default connect(mapStateToProps)(ExpenseListFilters);\n","import React from 'react';\nimport ExpenseList from './ExpenseList';\nimport ExpenseListFilters from './ExpenseListFilters'\n\nconst ExpenseDashboardPage=()=>(\n  <div>\n    <ExpenseListFilters/>\n    <ExpenseList />\n  </div>\n);\nexport default ExpenseDashboardPage;\n","import React from 'react';\nimport moment from 'moment';\nimport {SingleDatePicker} from 'react-dates';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css'\n\n//this is noraml react class(states and methods are defined in this class) without redux\nexport default class ExpenseForm extends React.Component{\n  constructor(props){\n    super(props); //Inherit props from the upper class\n    this.state = { //Set own statea\n      //If from AddExpense no date will be shown('') ,but from EditExpense\n      description: props.expense? props.expense.description: '',\n      note: props.expense? props.expense.note:'',\n      amount: props.expense? (props.expense.amount / 100).toString():'',\n      createdAt: props.expense? moment(props.expense.createdAt): moment(),\n      calendarFocused: false,\n      error: ''\n    };\n  }\n\n  onDescriptionChange =(e) => {\n    const description = e.target.value;\n    this.setState(() => ({description}));\n  };\n  onNoteChange=(e) =>{\n    const note = e.target.value;\n    this.setState(()=>({note}));\n  };\n  onAmountChange=(e)=>{\n    const amount = e.target.value;\n\n    //to understanfing go to 'regex101.com'\n    //In this case only enable '2 decimal number'\n    if(!amount || amount.match(/^\\d{1,}(\\.\\d{0,2})?$/)){\n      this.setState(() => ({amount}));\n    }\n  };\n  onDateChange = (createdAt) => {\n    if(createdAt){\n      this.setState(() => ({ createdAt }));\n    }\n  };\n  onFocusChange = ({ focused }) => {\n    this.setState(() => ({ calendarFocused: focused }));\n  };\n  onSubmit =(e) =>{\n    e.preventDefault();\n    //error handling in the case of no input in description and amount field\n    if(!this.state.description || !this.state.amount){\n      this.setState(()=>({error:'Please provide description and amount.'}));\n    }else{\n      this.setState(()=>({error: ''}));\n      this.props.onSubmit({\n        /*onSubmit prop is from AddExpensePage.js. and the contents(description, amount, ...)\n        will be returned to AddEpensePage by onSubmit Form.*/\n        description:this.state.description,\n        amount: parseFloat(this.state.amount, 10) * 100,\n        createdAt: this.state.createdAt.valueOf(),\n        note: this.state.note\n      });\n    }\n  };\n  render(){\n    return(\n      <div>\n        {this.state.error && <p>{this.state.error}</p>}\n        <form onSubmit={this.onSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Description\"\n            autoFocus\n            value={this.state.description}\n            onChange={this.onDescriptionChange}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Amount\"\n            value = {this.state.amount}\n            onChange={this.onAmountChange}\n          />\n          <SingleDatePicker\n              date={this.state.createdAt}\n              onDateChange={this.onDateChange}\n              focused={this.state.calendarFocused}\n              onFocusChange={this.onFocusChange}\n              numberOfMonths={1}\n              isOutsideRange={() => false}\n            />\n\n          <textarea\n            placeholder=\"Add a note for your expense (optional)\"\n            value={this.state.note}\n            onChange={this.onNoteChange}\n          >\n          </textarea>\n          <button>Add Expense</button>\n        </form>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ExpenseForm from './ExpenseForm';\nimport {connect} from 'react-redux';\nimport {addExpense} from '../actions/expenses';\n\nconst AddExpensePage = (props) => (\n  <div>\n    <h1>Add Expense</h1>\n    <ExpenseForm\n      //description, amount of expense will be returned from Expense Form\n      onSubmit={(expense) => {\n        props.dispatch(addExpense(expense));\n        props.history.push('/'); //optional: back to dashboard page\n      }}\n    />\n  </div>\n);\n\n//Enabling AddExpensePage accessing to redux 'props.dispatch'\nexport default connect()(AddExpensePage);\n","//actions for dispatching by redux\n//dispatched action goes to reducers\n\nimport uuid from 'uuid';\n//AddEXPENSE\nexport const addExpense = ({description='',note='',amount=0,createdAt=0}={}) => ({\n  type:'ADD_EXPENSE',\n  expense:{\n    id:uuid(),\n    description,\n    note,\n    amount,\n    createdAt\n  }\n});\n//REMOVE_EXPENSE\nexport const removeExpense = ({ id }={}) => ({\n  type:'REMOVE_EXPENSE',\n  id\n});\n//EDIT_EXPENSE\nexport const editExpense=(id, updates) =>({\n  type:'EDIT_EXPENSE',\n  id,\n  updates\n});\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport ExpenseForm from './ExpenseForm';\nimport {editExpense, removeExpense} from '../actions/expenses';\n\nconst EditExpensePage=(props)=>{\n  return(\n    <div>\n      <ExpenseForm\n      expense={props.expense}\n      //description, amount of expense will be returned from Expense Form\n      onSubmit={(expense) => {\n        props.dispatch(editExpense(props.expense.id, expense));\n        props.history.push('/');\n        console.log('updated', expense);\n      }}\n      />\n\n      <button onClick={() => {\n        props.dispatch(removeExpense({ id:props.expense.id }));\n        props.history.push('/');\n      }}>Remove</button>\n\n    </div>\n  );\n};\n\n//Margin selelcted expense sates(descriotion, amount...) to EditExpense's props\nconst mapStateToProps = (state, props) => {\n  return {\n    expense: state.expenses.find((expense) => expense.id === props.match.params.id)\n  };\n};\nexport default connect(mapStateToProps)(EditExpensePage);\n/*If only for connecting dispatch from redux without any other state,\nthen no need to connecting mapStateToProps*/\n","import React from 'react';\n\nconst HelpPage=()=>(\n  <div>\n    This is from my help component\n  </div>\n);\n\nexport default HelpPage;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst NotFoundPage=()=>(\n  <div>\n    {/* function of react router */}\n    404! - <Link to=\"/\">Go Home</Link>\n  </div>\n);\n\nexport default NotFoundPage;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nconst Header = () =>(\n  <header>\n    <h1>Expensify</h1>\n    {/*for NavBar, it is styled in _base_scss*/}\n    <NavLink to=\"/\" activeClassName=\"is-active\" exact={true}>Dashboard</NavLink>\n    <NavLink to=\"/create\" activeClassName=\"is-active\" >Create Expense</NavLink>\n    <NavLink to=\"/help\" activeClassName=\"is-active\" >Help</NavLink>\n  </header>\n);\nexport default Header;\n","import React from 'react';\nimport {BrowserRouter,Route,Switch,Link,NavLink} from 'react-router-dom';\nimport ExpenseDashboardPage from '../components/ExpenseDashboardPage';\nimport AddExpensePage from '../components/AddExpensePage';\nimport EditExpensePage from '../components/EditExpensePage';\nimport HelpPage from '../components/HelpPage';\nimport NotFoundPage from '../components/NotFoundPage';\nimport Header from '../components/Header';\n\nconst AppRouter= () => (\n  <BrowserRouter>\n    <div>\n      <Header />\n      <Switch>\n        <Route path=\"/\" component={ExpenseDashboardPage} exact={true}/>\n        <Route path=\"/create\" component={AddExpensePage}/>\n        {/* id is defined in typed URL and passed to the props of EditExpensePage */}\n        <Route path=\"/edit/:id\" component={EditExpensePage}/>\n        <Route path=\"/help\" component={HelpPage}/>\n        <Route component={NotFoundPage}/>\n      </Switch>\n    </div>\n  </BrowserRouter>\n);\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//Expenses Reducer\nconst expensesReducerDefaultState = [];\n\nconst expensesReducer = (state = expensesReducerDefaultState, action) => {\n  switch (action.type){\n    case 'ADD_EXPENSE':\n      return [\n        ...state,\n        action.expense\n      ];\n      case 'REMOVE_EXPENSE':\n        return state.filter(({id}) => id!==action.id);\n      case 'EDIT_EXPENSE':\n        return state.map((expense) => {\n          if(expense.id === action.id){\n            return{\n              ...expense,\n              ...action.updates //replace expense object with updates\n            }\n          }else{\n            return expense;\n          }\n        });\n    default:\n      return state;\n  }\n};\n\nexport default expensesReducer;\n","import moment from 'moment';\n\n//Filters Reducer\nconst filtersReducerDefaultState = {\n  text: '',\n  sortBy: 'date', //date or amount\n  startDate: moment().startOf('month'),\n  endDate: moment().endOf('month')\n};\n\nconst filtersReducer = (state = filtersReducerDefaultState, action) => {\n  switch(action.type){\n    case 'SET_TEXT_FILTER':\n      return{\n        ...state,\n        text:action.text\n      };\n    case 'SORT_BY_AMOUNT':\n      return{\n        ...state,\n        sortBy: 'amount'\n      };\n    case 'SORT_BY_DATE':\n      return{\n        ...state,\n        sortBy: 'date'\n      };\n    case 'SET_START_DATE':\n      return{\n        ...state,\n        startDate: action.startDate\n      };\n    case 'SET_END_DATE':\n      return{\n        ...state,\n        endDate: action.endDate\n      };\n    default:\n    return state;\n  }\n};\n\nexport default filtersReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport AppRouter from './routers/AppRouter';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/styles.scss';\n\n//Manipulate Expenses and filters and Showing the results\nimport {addExpense} from './actions/expenses';\nimport {setTextFilter} from './actions/filters';\nimport getVisibleExpenses from './selectors/expenses';\n\n//combining REDUX\nimport configureStore from './store/configureStore';\nconst store = configureStore();\n\n//This is for providing react props with redux created store.\n//Then, connect them like what 'ExpenseList.js' does.\nconst jsx = (\n  <Provider store={store}>\n    <AppRouter/>\n  </Provider>\n);\n\nReactDOM.render(jsx, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {createStore,combineReducers} from 'redux';\nimport expensesReducer from '../reducers/expenses';\nimport filtersReducer from '../reducers/filters';\n\n//Store Creation\nexport default () => {\n  const store = createStore(\n    combineReducers({\n      expenses: expensesReducer,\n      filters: filtersReducer\n    }),\n    //This is for redux dev tool(in CHROME)\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n  return store;\n};\n"],"sourceRoot":""}